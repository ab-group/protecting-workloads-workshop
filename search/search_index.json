{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AWS Protecting Workloads Workshop Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them. Scenario Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop module is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User To get started, review the architecture diagram below and proceed to module 1. Workshop Modules Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager Workshop Architecture","title":"Scenario"},{"location":"#aws-protecting-workloads-workshop","text":"Welcome to the AWS Protecting Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use AWS Web Application Firewall (WAF), Amazon Inspector and AWS Systems Manager to identify the vulnerabilities and remediate them.","title":"AWS Protecting Workloads Workshop"},{"location":"#scenario","text":"Welcome to Widgets LLC! You have just joined the team and your first task is to enhance security for the company website. The site runs on Linux, PHP and Apache and uses an EC2 an autoscaling group behind an Application Load Balancer (ALB). After an initial architecture assessment you have found multiple vulnerabilities and configuration issues. The dev team is swamped and will not be able to remediate code level issues for several weeks. Your mission in this workshop module is to build an effective set of controls that mitigate common attack vectors against web applications, and provide you with the monitoring capabilities needed to react to emerging threats when they occur. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User To get started, review the architecture diagram below and proceed to module 1.","title":"Scenario"},{"location":"#workshop-modules","text":"Mitigating Common Web Application Attack Vectors Using AWS Web Application Firewall Automating Assessment and Remediation Using Amazon Inspector and AWS Systems Manager","title":"Workshop Modules"},{"location":"#workshop-architecture","text":"","title":"Workshop Architecture"},{"location":"contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing"},{"location":"contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"getting-started/","text":"Getting Started Create an AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshops!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#create-an-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for.","title":"Create an AWS account"},{"location":"getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . You are now setup for the workshops!","title":"Add credits (optional)"},{"location":"license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"inspector-sm/","text":"Under Construction! - AWS Protecting Your Workloads Workshop Welcome to the AWS Protecting Your Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use Amazon Inspector, AWS WAF, and AWS Systems Manager to identify the vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User Workshop Phases To begin the workshop, proceed to the Build phase below. Build Assess Remediate Verify","title":"Scenario"},{"location":"inspector-sm/#under-construction-aws-protecting-your-workloads-workshop","text":"Welcome to the AWS Protecting Your Workloads Workshop! In this workshop, you will build an environment consisting of two Amazon Linux web servers behind an application load balancer. The web servers will be running a PHP web site that contains several vulnerabilities. You will then use Amazon Inspector, AWS WAF, and AWS Systems Manager to identify the vulnerabilities and remediate them. Level : Intermediate - Advanced Duration : 2 hours CSF Functions : Protect CAF Components : Preventive Prerequisites : AWS Account, Admin IAM User","title":"Under Construction! - AWS Protecting Your Workloads Workshop"},{"location":"inspector-sm/#workshop-phases","text":"To begin the workshop, proceed to the Build phase below. Build Assess Remediate Verify","title":"Workshop Phases"},{"location":"inspector-sm/assess/","text":"Protecting Your Workloads - Assess Phase In the previous Build Phase, you built a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to use Amazon Inspector to assess the instances and identify findings that need to be remediated. Before you can assess the instances with Amazon Inspector, you need to identify the instances and install the Amazon Inspector agent on them. This is easier to do in small environments but the task can becone much more complex in organizations with hundreds or even thousands of instances. For this reason, you are going to learn how to use tags to select the instances. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the stack you built Look up the Amazon EC2 instances that were created as a result of the deployhment and understand the tags that are applied by AWS CloudFormation. Use AWS Systems Manager to install the Amazon Inspector agent on the instances and run the scan Learn about Amazon Inspector rules packages Examine Amazon Inspector findings Examine the stack that you built Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance. The reason for this is that the CloudFormation stack did not deploy any. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. The auto scaling group was configured to propogate tags (attributes) to the instances it launches. In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. You will now learn how to look up the Amazon EC2 instances using tags. Look up the Amazon EC2 instances Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node ) into the search box. Copy the two instance ids (they begin with i- and are followed by a series of digits) into your scratch file in case you need them. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase. Install the Inspector Agent on the Amazon EC2 instances Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment. Use Amazon Inspector to scan the instances Configure the Amazon Inspector target Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments. Configure the Amazon Inspector template and run the assessment Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment rus . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below. Learn more about Amazon Inspector Rules Packages Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here . Examine the findings After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation. Click here to proceed to the Remediate Phase.","title":"Assess Phase"},{"location":"inspector-sm/assess/#protecting-your-workloads-assess-phase","text":"In the previous Build Phase, you built a CloudFormation stack that contains some Amazon EC2 instances behind an application load balancer. You are now going to use Amazon Inspector to assess the instances and identify findings that need to be remediated. Before you can assess the instances with Amazon Inspector, you need to identify the instances and install the Amazon Inspector agent on them. This is easier to do in small environments but the task can becone much more complex in organizations with hundreds or even thousands of instances. For this reason, you are going to learn how to use tags to select the instances. Tags are labels that can be attached to AWS resources to make it easier to act on them collectively. In this section you will do the following tasks: Examine the stack you built Look up the Amazon EC2 instances that were created as a result of the deployhment and understand the tags that are applied by AWS CloudFormation. Use AWS Systems Manager to install the Amazon Inspector agent on the instances and run the scan Learn about Amazon Inspector rules packages Examine Amazon Inspector findings","title":"Protecting Your Workloads - Assess Phase"},{"location":"inspector-sm/assess/#examine-the-stack-that-you-built","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Click the check box to the left of the stack name and then click the Resources tab below. You will see a list of resources that were deployed by the stack as shown in the figure below. The Type column lists the type of the resouces. Notice that you will not see any resources of type AWS::EC2::Instance. The reason for this is that the CloudFormation stack did not deploy any. The stack did, however, deploy an auto scaling group with a launch configuration that in turn launched the instances. The auto scaling group was configured to propogate tags (attributes) to the instances it launches. In a production environment, you may have a large number of resources that spin up and spin down because of the elastiicity that AWS offers. You will now learn how to look up the Amazon EC2 instances using tags.","title":"Examine the stack that you built"},{"location":"inspector-sm/assess/#look-up-the-amazon-ec2-instances","text":"Go to the Amazon EC2 console and look for instances having a name that begins with the stack name followed by -node , pww-node in this example. If you cannot see them, type the instance name ( pww-node ) into the search box. Copy the two instance ids (they begin with i- and are followed by a series of digits) into your scratch file in case you need them. Select one of them by checking the box to the left of the instance and then click on the Tags tab. You should see a table like that in the figure below. Notice that the instance has tags reflecting the CloudFormation stack name and stack id. These tags are added because of settings in the auto scaling group which propogate tags to newly created instances. You have now learned about the tags that you can use to look up AWS resources. You will take advantage of this feature when you set up Amazon Inspector later in this phase.","title":"Look up the Amazon EC2 instances"},{"location":"inspector-sm/assess/#install-the-inspector-agent-on-the-amazon-ec2-instances","text":"Now that you know how to identify the instances in the environment, you need to install the Amazon Inspector agent on them. AWS Systems Manager provides a way for you to run commands across your Amazon EC2 instances. The commands are defined in documents . AWS provides a document that you will use to install the Amazon Inspector agent. You will use tags to identify the instances on which to apply the document. Go to the AWS Systems Manager console. Under the Actions menu on the left, click Run Command . You will be taken to the AWS Systems Manager Run Command home screen. Click the Run a Command button and the Run a Command screen will appear. In the Command document window, page through the available documents until you find the document named AmazonInspector-ManageAWSAgent . Click the radio button to the left of that document as shown in the figure below. Scroll further down until you can see the Targets window. Click the Specifying a tag radio button. For the tag key, enter aws:cloudformation:stack-name . For the value enter the name of the CloudFormation stack you created ( pww in this example) and click Add . Your screen should be similar to the figure below. Scroll down to the Output options window. Clear the box next to Enable writing to an S3 bucket as shown in the figure below. Scroll to the bottom of the screen and click the Run button. You will then be be taken to the command status window while the installation of the Amazon Inspector is running. You can periodically update the command status by clicking on the refresh button within the window. After the commands finish running, the Overall status should be Success as shown in the figure below. The number of instances may vary based on the version of the template. You have now installed the Amazon Inspector agent on the instances in the environment.","title":"Install the Inspector Agent on the Amazon EC2 instances"},{"location":"inspector-sm/assess/#use-amazon-inspector-to-scan-the-instances","text":"","title":"Use Amazon Inspector to scan the instances"},{"location":"inspector-sm/assess/#configure-the-amazon-inspector-target","text":"Go to the Amazon Inspector console and click Get Started if prompted. If you see a \"Welcome to Amazon Inspector\" wizard appear, click Cancel . You will set up Amazon Inspector manually so you can become more familiar with the service. Click Assessment Targets on the left menu and then click the Create button. Scroll down to the Assessment Target window. In the Name field, enter a name for the target. For example, given that the stack name in this example is pww , you can enter pww targets or another name of your choosing. In the Use Tags section, select aws:cloudformation:stack-name for the key from the drop down list and select the name of the stack ( pww in this example) from the drop down value list. Uncheck the Install Agents check box since we have already installed the agent. Your screen should look similar to the figure below. Click the Save button to save the target definition. Inspector may prompt you for permission to create a service linked role to give the Amazon Inspector service permission to retrieve information about your instances. If you see a prompt like the one in the figure below, click Ok to create the role. You have now created an Amazon Inspector target that identifies the instances that would be assessed. The target selects instances based on tag values. In this case, the tag you are using is aws:cloudformation:stack-name which is set to the name of the CloudFormation stack. In particular, the tag is added to the auto scaling launch configuration which is configured to propogate the tag to the Amazon EC2 instances that it launches. Because of this, Amazon Inspector will automatically scan new instances that may appear over the lifetime of the environment. This is an example of how the elasticity of the AWS cloud when combined with tagging can enable you to support dynamic environments.","title":"Configure the Amazon Inspector target"},{"location":"inspector-sm/assess/#configure-the-amazon-inspector-template-and-run-the-assessment","text":"Now that you have created an Amazon Inspector target, you will now create an Amazon Inspector tepmlate. You use templates to define the Amazon Inspector targets and rule packages that comprise an assessment run. Go to the Amazon Inspector console, click Assessment templates on the menu, and then click Create . In the Name field, enter a name for the template. In the Target name field, select the target you previously created from the list of options. In the Rules packages field, select Common Vulnerabilities and Exposures and Security Best Practices . In the Duration field, select 15 minutes . Do not accept the default value! In the Assessment Schedule, uncheck (turn off) the Set up recurring assessment runs so that the assessment template will only run a one-time assessment. Scroll to the bottom and click the Create and run button to save the template and run the assessment. Depending on the size of your screen, you may have to scroll down multiple windows. If you cannot click Create and run , make sure you unchecked the box in the previous step and try again. The assessment will start and will take 15 minutes to compete. On the Amazon Inspector menu, click Assessment rus . You should see an entry for the assesment you just started. While the assessment is running, the status will be Collecting data . Periodically refresh the screen to see the current status. When the assessment run ends, the status will change to Analysis complete. The assessment will run for approximately 15 minutes. While you are waiting, continue with the steps below.","title":"Configure the Amazon Inspector template and run the assessment"},{"location":"inspector-sm/assess/#learn-more-about-amazon-inspector-rules-packages","text":"Amazon Inspector offers a variety of rules packages that can be included in assessments. The applicable rules packages may vary by operating system. The Common Vulnerabilities and Exposures assessment is based on the CVE project that is hosted at cve.mitrei.org . Open a new tab in your browser to cve.mitre.orf . Click on Search CVE List . Enter CVE-2018-20169 into the search field and click Submit . This shows you how to research known vulnerabilities. The Security Best Practices rule package examines some common configuration settings for some of the most commobn Amazon Linux settings. You can read more about this rule package here .","title":"Learn more about Amazon Inspector Rules Packages"},{"location":"inspector-sm/assess/#examine-the-findings","text":"After the assessment run has completed, go to the Amazon Inspector console and click Assessment runs . The window should be similar to what appears below. On the line that represents your most recent run, make note of the number in the Findings column (22 in this diagram). After you perform the remediation later in this workshop, that number should decrease. Click on the number in the Findings column. The findings associated with the run will appear as shown below. You will see findings for each of the rules packages that you used in the assessment. The number of findings often varies by the age of the AMI (Amazon Machine Image) because older AMIs typically have more vulnerabilities than newer AMIs. Choose one of the findings associated with the Common Vulnerabilities and Exposures rule package. An example appears below. Note that there is a link in the recommendation on which you can click to see the CVE entry. Now that you have run the assessment and seen the findings you are ready to perform some remediation. Click here to proceed to the Remediate Phase.","title":"Examine the findings"},{"location":"inspector-sm/build/","text":"Protecting Your Workloads - Build Phase Click here to proceed to the Assess Phase.","title":"Build Phase"},{"location":"inspector-sm/build/#protecting-your-workloads-build-phase","text":"Click here to proceed to the Assess Phase.","title":"Protecting Your Workloads - Build Phase"},{"location":"inspector-sm/contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution. Reporting Bugs/Feature Requests We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment Contributing via Pull Requests Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request . Finding contributions to work on Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start. Code of Conduct This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments. Security issue notifications If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue. Licensing See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Contributing Guidelines"},{"location":"inspector-sm/contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional documentation, we greatly value feedback and contributions from our community. Please read through this document before submitting any issues or pull requests to ensure we have all the necessary information to effectively respond to your bug report or contribution.","title":"Contributing Guidelines"},{"location":"inspector-sm/contribute/#reporting-bugsfeature-requests","text":"We welcome you to use the GitHub issue tracker to report bugs or suggest features. When filing an issue, please check existing open , or recently closed , issues to make sure somebody else hasn't already reported the issue. Please try to include as much information as you can. Details like these are incredibly useful: A reproducible test case or series of steps The version of our code being used Any modifications you've made relevant to the bug Anything unusual about your environment or deployment","title":"Reporting Bugs/Feature Requests"},{"location":"inspector-sm/contribute/#contributing-via-pull-requests","text":"Contributions via pull requests are much appreciated. Before sending us a pull request, please ensure that: You are working against the latest source on the master branch. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already. You open an issue to discuss any significant work - we would hate for your time to be wasted. To send us a pull request, please: Fork the repository. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change. Ensure local tests pass. Commit to your fork using clear commit messages. Send us a pull request, answering any default questions in the pull request interface. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation. GitHub provides additional document on forking a repository and creating a pull request .","title":"Contributing via Pull Requests"},{"location":"inspector-sm/contribute/#finding-contributions-to-work-on","text":"Looking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels ((enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.","title":"Finding contributions to work on"},{"location":"inspector-sm/contribute/#code-of-conduct","text":"This project has adopted the Amazon Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opensource-codeofconduct@amazon.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"inspector-sm/contribute/#security-issue-notifications","text":"If you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our vulnerability reporting page . Please do not create a public github issue.","title":"Security issue notifications"},{"location":"inspector-sm/contribute/#licensing","text":"See the LICENSE file for our project's licensing. We will ask you to confirm the licensing of your contribution. We may ask you to sign a Contributor License Agreement (CLA) for larger changes.","title":"Licensing"},{"location":"inspector-sm/getting-started/","text":"Getting Started Create an AWS account In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for. Create an admin user If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created. Add credits (optional) If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem . Create a Cloud9 instance (optional) If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Getting Started"},{"location":"inspector-sm/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"inspector-sm/getting-started/#create-an-aws-account","text":"In order to complete these workshops, you'll need a valid, usable AWS Account . Use a personal account or create a new AWS account to ensure you have the necessary access and that you do not accidentally modify corporate resources. Do not use an AWS account from the company you work for.","title":"Create an AWS account"},{"location":"inspector-sm/getting-started/#create-an-admin-user","text":"If you don't already have an AWS IAM user with admin permissions, please use the following instructions to create one: Browse to the AWS IAM console. Click Users on the left navigation and then click Add User . Enter a User Name , check the checkbox for AWS Management Console access , enter a Custom Password , and click Next:Permissions . Click Attach existing policies directly , click the checkbox next to the AdministratorAccess , and click Next:review . Click Create User Click Dashboard on the left navigation and use the IAM users sign-in link to login as the admin user you just created.","title":"Create an admin user"},{"location":"inspector-sm/getting-started/#add-credits-optional","text":"If you are doing this workshop as part of an AWS sponsored event, you will receive credits to cover the costs. Below are the instructions for entering the credits: Browse to the AWS Account Settings console. Enter the Promo Code you received (these will be handed out at the beginning of the workshop). Enter the Security Check and click Redeem .","title":"Add credits (optional)"},{"location":"inspector-sm/getting-started/#create-a-cloud9-instance-optional","text":"If the workshop you are doing requires you to run commands or scripts you will need to launch a an AWS Cloud9 instance which will provide you with a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. The workshop instructions will specify if this needed. Below are the instructions for launching an instance: Browse to the AWS Cloud9 console. Click Create environment on the right side. Enter a Name (security-workshop-ide) and click Next step . Leave all the defaults and click Next step . Click Create environment . The environment will open automatically after it has been provisioned. Browse back to the AWS Cloud9 console and you can click Open IDE on the environment you created to access it at anytime. You are now setup for the workshops!","title":"Create a Cloud9 instance (optional)"},{"location":"inspector-sm/license/","text":"License MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"inspector-sm/license/#license","text":"MIT License Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"inspector-sm/remediate/","text":"Protecting Your Workloads - Remediate Phase In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching Use AWS Systems Manager Patch Manager Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of yoru screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands. Check the patching status You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Remediate Phase"},{"location":"inspector-sm/remediate/#protecting-your-workloads-remediate-phase","text":"In the previous Assess Phase, you installed Amazon Inspector on the instances that were launched as a result of the CloudFormation stack. You will now use AWS Systems Manager Patch Manager to apply patches. You will use tags to select the instances as well. In this section you will do the following tasks: Use AWS Systems Manager Patch Manager to set up patching Use AWS Systems Manager Run Command to check the status of the patching","title":"Protecting Your Workloads - Remediate Phase"},{"location":"inspector-sm/remediate/#use-aws-systems-manager-patch-manager","text":"Go to the Systems Manager console and select Patch Manager. If you see the Patch Manager home screen, then click the default patch baselines link as shown below: You will now see a list of default patch baselines that are used to patch each operating system supported by Patch Manager. The default patch baseline only patches major security issues. You are going to crate a new Amazon Linux 2 patch baseline that will patch more things and make this new patch baseline the default. Click Create patch baseline . In the Name field, enter a name to give the new baseline such as pww . In the Operating system field, select Amazon Linux 2 . In the Approval rules section, check the box under Include non-security updates . IMPORTANT NOTE: Depending on the size of the screen, the box may not align with the title Include non-security updates . See the figure below. Click the Create patch baseline button at the bottom of the screen. You should now see the new patch baseline in the list of baselines. You may need to refresh the browser window to see it. This new patch baseline includes non-security patches. Note at the end of the line representing the newly created patch baseine you will see No in the Default Baseline column as shown in the figure below. Click the radio button on the line with the newly created patch baseline. From the Actions menu at the top select Set default patch baseline . You will be asked to confirm this. You have just set the default patch baseline for Amazon Linux 2 to use the patch baseline you just created that includes non-security patches. You should now see Yes at the end of the patch baseline as shown below. Click Configure patching In the Configure patching screen, go to the Instances to patch section and click the Enter instance tags radio button. In the Instance tags field, enter aws:cloudformation:stack-name into the Tag key field. In the Tag value field, enter the stack name that you created earlier. Click Add . In the Patching schedule section, click the Skip scheduling and patch instances now radio button. In the Patching operation section, click the Scan and install radio button if it is not alerady selected. Your screen should look similar to the image below. Click the Configure patching button at the bottom of the window. You will see a message at the top of yoru screen saying that Patch Manager will use Run Command to patch the instances. Run Command is another feature of AWS Systems Manager that runs a command across multiple Amazon EC2 instances. Patch Manager build the commands necessary to perform the patching and is using Run Command to actually execute the commands.","title":"Use AWS Systems Manager Patch Manager"},{"location":"inspector-sm/remediate/#check-the-patching-status","text":"You are now going to examine the status of the patching operation by using AWS Systems Manager Run Command. Go to the AWS Systems Manager Console and click Run Command on the left menu. If the patching is still running, you will see the entry in the Commands tab. Wait for the command to finish. Refresh the screen if necessary to update the display. Once the command has finished, click on Command history . Look for the line containing the document name AWS-RunPatchBaseline . That represents the Patch Manager activity.Your screen should look similar to the image below. Click on the Command ID link to see more details about the command. You will see a line for each target with a link referencing the Instance ID. If you then click on the Instance ID , you will see each step of the command that is executed. Note that some steps are skipped because they do not apply to the operating system of the instance. Also, you only see the first part of the command output. If you want to see all of the output you can configure Systems Manager to direct the output into an Amazon S3 bucket. You have now completed the patching operation. In the Verify Phase, you will re-assess the environment with Amazon Inspector. Click here to proceed to the Verify Phase.","title":"Check the patching status"},{"location":"inspector-sm/verify/","text":"Protecting Your Workloads - Verify Phase","title":"Verify Phase"},{"location":"inspector-sm/verify/#protecting-your-workloads-verify-phase","text":"","title":"Protecting Your Workloads - Verify Phase"},{"location":"waf/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources. Module Phases To begin the module, proceed to the Build phase below. Build Assess Remediate Verify","title":"Scenario"},{"location":"waf/#mitigating-common-web-application-attack-vectors-using-aws-waf","text":"For your initial task, you will configure AWS WAF to protect your site from common attacks such as SQL injection and cross site scripting. AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security or consume excessive resources.","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF"},{"location":"waf/#module-phases","text":"To begin the module, proceed to the Build phase below. Build Assess Remediate Verify","title":"Module Phases"},{"location":"waf/assess/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities Identify the stack that you built Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later. Look up the Stack Outputs Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop module. While in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys. Website Scanning Environment and Tools In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET Canary POST SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments. Website Scanning Environment and Tools - Manual Scanning Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more. Website Scanning Environment and Tools - Automated Scanning In addition to the ad hock scanning, automatied scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop particpants. You can identify the scanning results for your website using the Unique Id in the CloudFormation outputs. Click here to proceed to the Remediate Phase.","title":"Assess Phase"},{"location":"waf/assess/#mitigating-common-web-application-attack-vectors-using-aws-waf-assess-phase","text":"In the previous Build Phase, you built a CloudFormation stack that contains a PHP website on Amazon EC2 instances behind an application load balancer. You are now going to assess the posture of the site and then add an AWS WAF Web ACL to your site. In this section you will do the following tasks: Identify the stack you built Look up the output values for your environment and test access Use your Red Team Host to test for website vulnerabilities","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Assess Phase"},{"location":"waf/assess/#identify-the-stack-that-you-built","text":"Go to the CloudFormation console in the same AWS region in which you created the stack in the Build Phase. You should see a list of stacks similar to the figure below. Locate the stack you created. In this documentation, the name of the stack is pww . Copy this stack name into a scratch file on your workstation in case you need it later.","title":"Identify the stack that you built"},{"location":"waf/assess/#look-up-the-stack-outputs","text":"Go to the stack outputs and look for the website URL stored in the albEndpoint output value. Test access to the site by right clicking and opening in a new tab. Note the URL for your site as this will be used throughout this workshoop module. While in the stack outputs, note the ScannerUID value. This Id value will be used to identify the posture of your site within the automated scanner and the associated dashboard. While still in stack outputs, right click the link in RedTeamHostSession and open in new tab. This will launch an AWS Systems Manager Session Manager to the host you will use to perform add hock scans against your site URL. AWS Systems Manager Session Manager Session Manager is a fully managed AWS Systems Manager capability that lets you manage your Amazon EC2 instances through an interactive one-click browser-based shell or through the AWS CLI. Session Manager provides secure and auditable instance management without the need to open inbound ports, maintain bastion hosts, or manage SSH keys.","title":"Look up the Stack Outputs"},{"location":"waf/assess/#website-scanning-environment-and-tools","text":"In order to test your AWS WAF ruleset, this lab has been configured with two scanning capabilities; a Red Team Host where you can invoke manual scanning and an automated scanner which runs from outside your lab environment. The scanner performs 10 basic tests designed to help simulate and mitigate common web attack vectors. Canary GET Canary POST SQL Injection (SQLi) in Query String SQL Injection (SQLi) in Cookie Cross Site Scripting (XSS) in Query String Cross Site Scripting (XSS) in Body Inclusion in Modules Cross Site Request Forgery (CSRF) Token Missing Cross Site Request Forgery (CSRF) Token Invalid Path Traversal These basic tests are designed to provide common examples you can use to test AWS WAF functionality. You should perform thorough analysis and testing when implementing rules into your production environments.","title":"Website Scanning Environment and Tools"},{"location":"waf/assess/#website-scanning-environment-and-tools-manual-scanning","text":"Once you have started a Session Manager connection to your Red Team Host, the scanner script can be invoked by typing the following command while in the /usr/bin directory: python3 scanner.py http://your-alb-endpoint The scanner.py script will run each of the tests above and report back the following information: Request : The HTTP request command used. Test Name : The name of the test from list above. Result : The HTTP status code returned. As you can see by running the script there are several vulnerabilities that need to be addressed. In the remnediate phase you will configure an AWS WAF Web ACL to block these requests. When AWS WAF blocks a web request based on the conditions that you specify, it returns HTTP status code 403 (Forbidden). Note about Testing Tool The scanner.py script uses an open source HTTP client called httpie . HTTPie\u2014aitch-tee-tee-pie\u2014is a command line HTTP client with an intuitive UI, JSON support, syntax highlighting, wget-like downloads, plugins, and more.","title":"Website Scanning Environment and Tools - Manual Scanning"},{"location":"waf/assess/#website-scanning-environment-and-tools-automated-scanning","text":"In addition to the ad hock scanning, automatied scanning is also performed against your lab website. The automated tests are similar to the manual tests but the results are posted to a centralized scanning results dashboard along with the other workshop particpants. You can identify the scanning results for your website using the Unique Id in the CloudFormation outputs. Click here to proceed to the Remediate Phase.","title":"Website Scanning Environment and Tools - Automated Scanning"},{"location":"waf/build/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase Environment setup To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. US West 2 (Oregon) US East 2 (Ohio) Click Next on the Specify Template section. On the Specify stack details step, update the following Parmeters: Scanner Username: Enter the username provided by the workshop team. Scanner Password: Enter the password provided by the workshop team. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. CLick Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. Click here to proceed to the Assess Phase.","title":"Build Phase"},{"location":"waf/build/#mitigating-common-web-application-attack-vectors-using-aws-waf-build-phase","text":"","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Build Phase"},{"location":"waf/build/#environment-setup","text":"To setup the workshop environment, launch the CloudFormation stack below in the preferred AWS region using the \"Deploy to AWS\" links below. This will automatically take you to the console to run the template. US West 2 (Oregon) US East 2 (Ohio) Click Next on the Specify Template section. On the Specify stack details step, update the following Parmeters: Scanner Username: Enter the username provided by the workshop team. Scanner Password: Enter the password provided by the workshop team. Trusted Network CIDR: Enter a trusted IP or CIDR range you will access the site from using a web browser. You can optain your current IP at Ifconfig.co The entry should follow CIDR notation. i.e. 10.10.10.10/32 for a single host. CLick Next Click Next on the Configure stack options section. Finally, acknowledge that the template will create IAM roles under Capabilities and click Create . This will bring you back to the CloudFormation console. You can refresh the page to see the stack starting to create. Before moving on, make sure the stack is in a CREATE_COMPLETE status. This should take ~8 minutes. Click here to proceed to the Assess Phase.","title":"Environment setup"},{"location":"waf/remediate/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase Click here to proceed to the Verify Phase.","title":"Remediate Phase"},{"location":"waf/remediate/#mitigating-common-web-application-attack-vectors-using-aws-waf-remediate-phase","text":"Click here to proceed to the Verify Phase.","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Remediate Phase"},{"location":"waf/verify/","text":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase","title":"Verify Phase"},{"location":"waf/verify/#mitigating-common-web-application-attack-vectors-using-aws-waf-verify-phase","text":"","title":"Mitigating Common Web Application Attack Vectors Using AWS WAF - Verify Phase"}]}